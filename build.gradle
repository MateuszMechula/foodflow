plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'org.openapi.generator' version "${openApiGeneratorVersion}"
}

group = 'pl'
version = '1.0'

java {
    sourceCompatibility = '17'
}

jacoco {
    toolVersion = "0.8.10"
}
bootJar {
    archiveFileName = "foodflow.${archiveExtension.get()}"
}
jar {
    enabled = false
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-devtools'

    // db
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    runtimeOnly 'org.postgresql:postgresql'

    // api create swagger documentation
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocOpenApiVersion}"

    // Po wygenerowaniu klienta, trzeba będzie dodać poniższe zależności, żeby kod się kompilował
    implementation "javax.annotation:javax.annotation-api:${javaxAnnotationApiVersion}"
    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"

    // annotations
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation "org.mapstruct:mapstruct:$mapstructVersion"
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapStructBindingVersion}"

    // warning: unknown enum constant When.MAYBE
    // reason: class file for javax.annotation.meta.When not found
    implementation "com.google.code.findbugs:jsr305:${jsr305Version}"

    // test
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation "org.slf4j:slf4j-api:${wiremockSlf4jVersion}"
    testImplementation "com.github.tomakehurst:wiremock-standalone:${wiremockVersion}"


    //integration test
    testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
}

openApiGenerate {
    generatorName = "java"
    library = "webclient"
    configOptions = [
            'serializableModel'   : 'true',
            'dateLibrary'         : 'java8',
            'serializationLibrary': 'jackson',
            'validateSpec'        : 'false'
    ]
    outputDir = "$buildDir/generated-sources/openapi".toString()
    inputSpec = "$rootDir/src/main/resources/constracts/weatherAPI-1.0.2.json".toString()
    apiPackage = "pl.foodflow.infrastructure.weather.api"
    modelPackage = "pl.foodflow.infrastructure.weather.model"
}
sourceSets {
    main {
        java.srcDirs += "$buildDir/generated-sources/openapi/src/main/java"
    }
}

compileJava.dependsOn tasks.openApiGenerate

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

compileJava.options.encoding = 'UTF-8'
